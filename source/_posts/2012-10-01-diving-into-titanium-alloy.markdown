---
layout: post
title: "Diving Into Titanium Alloy"
date: 2012-10-01 13:09
comments: true
categories: [Technology, Programming, Titanium, Mobile, Alloy]
---

###Titanium

For those not familiar with [Titanium](http://appcelerator.com), it's an SDK
that allows you to write mobile apps for Android and iOS using Javascript with a
single code-base. The "Code once, run everywhere" approach has historically
resulted in applications that try their best to look native, but fall short of
the mark. Titanium instead goes for "Code once, *adapt* everywhere". What that
means is that you'll write your application logic once, and then design the UI
elements for each platform separately (while recycling the common elements
wherever you can).

This all sounds well and good, but there are some problems you'll notice if you
try using it. For starters, it's difficult to understand what best practices
are. Tutorials and screencasts you find often reference outdated APIs or
techniques, leaving you wondering what went wrong. Even more problematic, there
is no clear-cut design pattern or framework that you can apply to your code (
well, there is now, but more on that later). What irked me most, however, was
that UI logic and styling all had to be done programatically. There is no
concept of storyboards or XML layouts for UI elements. Some made do with mixing
in backbone.js for structure, while others modelled their applications after
[Tweetanium](https://github.com/appcelerator-titans/tweetanium). I found both
approaches to be a bit unclear, so I personally avoided them.

These past few months, however, the [Appcelerator](http://appcelerator.com) has
been working on an MVC framework for developers to use. Right now, it's only
at a pre-release stage. There's no thorough documentation or anything of the
sort, but the core APIs shouldn't be changing much. I've been working on a
Titanium app with a few other people, and we recently decided to scrap our code
and roll with [Alloy](https://github.com/appcelerator/alloy). Read on to see
what the first day with Alloy was like.




###Working with Alloy

[Nodejs](http://nodejs.org) is a requirement for Alloy, so you'll need to grab
that if you're interested in working with it. Once you've done that, you can
just run this in a terminal to get Alloy:

`npm install -g alloy`


To create an Alloy project, you're required to first create a project through
Titanium Studio. After that, you'll be independent from the Studio (unless you
really like using it for whatever reason). Once you've done that, you can cd
into the project directory and run `alloy new` to create your alloy project.

When working with alloy, all the code you write goes in the app folder that is
generated when you create an alloy project. You do **not** write anything in the
Resources folder. The contents of your app folder get compiled to create the
code in Resources. If you look at the gitignore that's generated by alloy, you
might be a bit surpised by this. Here's what it looks like:

``` text .gitignore

.DS_Store
build.log
build
npm-debug.log
tmp
```

No mention of Resources anywhere in there. I was curious about this, so I
searched around, and [this](http://jira.appcelerator.org/browse/TIMOB-10991) is
what I came up with. For those unwilling to click on links, it's basically an
issue that prevents Alloy from compiling if the Resources folder doesn't exist.
That's fair enough, but it would still be trivial to ignore everything other
than a .gitkeep file from the directory. It turns out, however, that Alloy
erases and recreates the Resources folder on each compilation. Weird. But
there's an easy enough way to work around this.

First, add these two lines to the gitignore:

    Resources
    !Resources/.gitkeep

After that, I created a Rakefile in my app folder to handle compilation,
running, and recreation of the .gitkeep file. I know, I know, Rake seems out of
place here, but typing rake has become second nature to me, so I went with it.
Feel free to write up your own variation of this:

``` ruby Rakefile

task :default do
  sh 'alloy compile'
  sh 'alloy run'
  sh 'touch ' + File.dirname(__FILE__) + '/../Resources/.gitkeep'
end
```

And with that, you no longer have to deal with excess baggage in your git repo.
